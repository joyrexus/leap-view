// Generated by CoffeeScript 1.6.3
(function() {
  var distance, square;

  square = function(x) {
    return Math.pow(x, 2);
  };

  distance = function(a, b) {
    var i, sum, _i, _ref;
    sum = 0;
    for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      sum += square(a[i] - b[i]);
    }
    return Math.sqrt(sum);
  };

  this.extract = {
    distance: function(range) {
      var a, b, csv, dist, dstb, frame, row, secs, _i, _len, _ref;
      csv = ['FRAME,TIME,DISTANCE,STABILIZED'];
      for (_i = 0, _len = range.length; _i < _len; _i++) {
        frame = range[_i];
        if (frame.pointables.length === 2) {
          _ref = frame.pointables.slice(0), a = _ref[0], b = _ref[1];
          dist = distance(a.tipPosition, b.tipPosition);
          dstb = distance(a.stabilizedTipPosition, b.stabilizedTipPosition);
          secs = (frame.timestamp - startTime) / 1000000;
          row = [frame.id, secs, dist, dstb];
          csv.push(row.join(','));
        }
      }
      return csv.join('\n');
    },
    velocity: function(range) {
      var csv, frame, hand, row, secs, _i, _len;
      csv = ['FRAME_ID,TIME,Y_POS,Y_VEL'];
      for (_i = 0, _len = range.length; _i < _len; _i++) {
        frame = range[_i];
        hand = frame.hands[0];
        secs = (frame.timestamp - startTime) / 1000000;
        row = [frame.id, secs, hand.palmPosition[1], hand.palmVelocity[1]];
        csv.push(row.join(','));
      }
      return csv.join('\n');
    }
  };

}).call(this);
